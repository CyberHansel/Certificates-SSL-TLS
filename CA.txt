"Certificates of Authority" also Root CA and their delegated "Intermediate Certificate Authorities"

crt.sh  registry available for certificate validation search. Cert is only way to determine validaty of web source.

$ openssl s_client -connect FQDN:port
$ openssl s_client -connect twitter.com:443 -showcerts          (or w/o -showcerts)
Save certificate with all begining and end of line into file.txt
$ openssl x509 -in file.txt -noout -text                        #For trouble shoot, extracted full certificate.  

* Serial Number: only unique number by Issuer - different issuer might have same serial number.
* Signature alghoritm: algo from ICA that signed cert.
* 


openssl s_client -connect lvrtc.lv:443 #makes ssl conn to lvrtc on port 443 and everything that we type in terminal is beeing sent to twitter! at this point its like we did telnet on port 80 to http webserver. we can:

GET /index.html HTTP/1.1
Host: twitter.com

And we can get webpage, like we have gone with telnet to port 80!!!

openssl s_client -connect lvrtc.lv:443 
We can see certificate LVRTC in terminal.
 save it to file.  file.txt


1.) version number - version of file certification. Determines whats inside cert. Like X509v3 extension.
2.)Serial number Unique to Issuer! Different ICA can have same number!
3.) Signature alghoritm - algo from ICA that signed cert.

Also we need full TLS handshake (Deep Dive). Who ever owns private key that corelates to public key of certificate is real domain.
------------------------------------------
*.twitter.com protects 1 subdomain, but doesn't protect 2 subdomains us.mail.twitter.com and twitter.com!!!
---------------------------------------------
30:00

lnk fails
php myadmin noslēpt!

Programmēsanas frameworkos ir drošas sql funkcijas, ko ieviest 

https://www.youtube.com/watch?v=QhW-0gceTYY  1h:00:00
badssl.com







------------------------

PS C:\>Get-ChildItem -Path Cert:\localMachine\My | Test-Certificate -Policy SSL -DNSName "dns=contoso.com"
Verifies each certificate in the MY store of the local machine and verifies that it is valid for SSL with the DNS name specified.

Test-Certificate -Cert cert:\currentuser\my\191c46f680f08a9e6ef3f6783140f60a979c7d3b -AllowUntrustedRoot -EKU "1.3.6.1.5.5.7.3.1" -User
This example verifies that the provided EKU is valid for the specified certificate and its chain. Revocation checking is not performed.



