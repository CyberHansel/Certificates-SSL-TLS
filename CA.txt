"Certificates of Authority" also Root CA and their delegated "Intermediate Certificate Authorities"

crt.sh  registry available for certificate validation search. Cert is only way to determine validaty of web source.

$ openssl s_client -connect FQDN:port
$ openssl s_client -connect twitter.com:443 -showcerts          (or w/o -showcerts)
Save certificate with all begining and end of line into file.txt
$ openssl x509 -in file.txt -noout -text                        #For trouble shoot, extracted full certificate.  

* Serial Number: only unique number by Issuer - different issuer might have same serial number.
* Signature alghoritm: algo from ICA that signed cert, basicly proof that CA signed certificate.
* Issuer: CA that issued that certificate.
* Validity: 
      Not Before: date when cert start to be valid.
      Not After: last date, after what cert expires.
* Subject: For what organization certificate is issued.
* Subject public key information: Includes Organization public key.
      Example below - Both modulos and exponent make public key of RSA.
         Modulus:
            00:d3:f6:56:
            45:f6:a4:66:
            7d:45:66:51:
            82:5f
         Exponent: 65537 (0x10001)
For Subject to prove that he is real owner of organization has to provide to CA something that proves he's owner of private key of that organization.

* X509v3 extensions:   Are found only in v3 certificate.
      X509v3 Authority key Identifier:                      These both values are simply hash from both public and
            keyid:B7:6B:A3:.....:F5:N7                      private keys, to track which keys are used in all the times, 
      X509v3 Subject key Identifier:                        because you can create new keys each year for safety.
            keyid:45:44:53:.....:HT:E7:B6            

      X509v3 Subject Alternative Name:
            DNS:twitter.com, DNS: www.twitter.com, DNS *.twitter.com !!!
            
            Wildcard: *.twitter.com
                  Protect: mail.twitter.com  images.twitter.com         !!!
                  NOT Protect: twitter.com, us.mail.twitter.com         !!!  
      
      X509v3 Key Usage: critical
            Digital Signature, Key Encipherment (used the keys in this signature, use asimetric keys to exchange simetric keys.)       
      X509v3 Extended Key Usage:
            TLS web Server Authentication, TLS Web Client Authentication

      X509v3 CRL Distribution Points:                                                     Certificates are just like an ID card. If we lose one its
            Full Name:                                                                    still valid. This is "Revoking certificate!". there is 2 ways
                  URI:http://crt3.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl          to revoke cert, first - old way with CRL. New way OCSP !!!!
            Full Name:                                                                    Online cerificate status protocol.
                  URI:http://crt4.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl              

We can check how our browser acts with different certificate errors in "badssl.com" page!

36:30



openssl s_client -connect lvrtc.lv:443 #makes ssl conn to lvrtc on port 443 and everything that we type in terminal is beeing sent to twitter! at this point its like we did telnet on port 80 to http webserver. we can:

GET /index.html HTTP/1.1
Host: twitter.com

And we can get webpage, like we have gone with telnet to port 80!!!





Also we need full TLS handshake (Deep Dive). Who ever owns private key that corelates to public key of certificate is real domain.
------------------------------------------
*.twitter.com protects 1 subdomain, but doesn't protect 2 subdomains us.mail.twitter.com and twitter.com!!!
---------------------------------------------
30:00

lnk fails
php myadmin noslēpt!

Programmēsanas frameworkos ir drošas sql funkcijas, ko ieviest 

https://www.youtube.com/watch?v=QhW-0gceTYY  1h:00:00
badssl.com







------------------------

PS C:\>Get-ChildItem -Path Cert:\localMachine\My | Test-Certificate -Policy SSL -DNSName "dns=contoso.com"
Verifies each certificate in the MY store of the local machine and verifies that it is valid for SSL with the DNS name specified.

Test-Certificate -Cert cert:\currentuser\my\191c46f680f08a9e6ef3f6783140f60a979c7d3b -AllowUntrustedRoot -EKU "1.3.6.1.5.5.7.3.1" -User
This example verifies that the provided EKU is valid for the specified certificate and its chain. Revocation checking is not performed.



